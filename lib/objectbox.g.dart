// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/clima_model.dart';
import 'models/task_model.dart';
import 'models/usuario_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 9044603302584989979),
      name: 'Task',
      lastPropertyId: const IdUid(9, 1692310568382584915),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7641643674709133880),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4903387818011163847),
            name: 'titulo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7661486228178730314),
            name: 'descricao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8551493836222001927),
            name: 'data',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5942181145083060555),
            name: 'hora',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 434061929942820136),
            name: 'repetir',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3059304842082115367),
            name: 'usuarioId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8779716436300967893),
            name: 'minutos',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7948848999036202503),
      name: 'Usuario',
      lastPropertyId: const IdUid(4, 596109510909793779),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5359713454639680041),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1246925592474206240),
            name: 'nome',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6719743912239343720),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 596109510909793779),
            name: 'senha',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 3659105021896317649),
      name: 'Clima',
      lastPropertyId: const IdUid(6, 3142254703108443733),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1667966081513308345),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 973496284932987804),
            name: 'data',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 9064923969997155911),
            name: 'descricao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7735669230687942597),
            name: 'condicao',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2202173018518777714),
            name: 'temperaturaMaxima',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3142254703108443733),
            name: 'temperaturaMinima',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 3659105021896317649),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [1692310568382584915],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Task: EntityDefinition<Task>(
        model: _entities[0],
        toOneRelations: (Task object) => [],
        toManyRelations: (Task object) => {},
        getId: (Task object) => object.id,
        setId: (Task object, int id) {
          object.id = id;
        },
        objectToFB: (Task object, fb.Builder fbb) {
          final tituloOffset = fbb.writeString(object.titulo);
          final descricaoOffset = fbb.writeString(object.descricao);
          final repetirOffset = fbb.writeString(object.repetir);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, tituloOffset);
          fbb.addOffset(2, descricaoOffset);
          fbb.addInt64(3, object.data.millisecondsSinceEpoch);
          fbb.addInt64(4, object.hora);
          fbb.addOffset(5, repetirOffset);
          fbb.addInt64(6, object.usuarioId);
          fbb.addInt64(7, object.minutos);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Task(
              titulo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              usuarioId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              data: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              hora: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              minutos:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              repetir: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Usuario: EntityDefinition<Usuario>(
        model: _entities[1],
        toOneRelations: (Usuario object) => [],
        toManyRelations: (Usuario object) => {},
        getId: (Usuario object) => object.id,
        setId: (Usuario object, int id) {
          object.id = id;
        },
        objectToFB: (Usuario object, fb.Builder fbb) {
          final nomeOffset = fbb.writeString(object.nome);
          final emailOffset = fbb.writeString(object.email);
          final senhaOffset = fbb.writeString(object.senha);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nomeOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, senhaOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Usuario(
              nome: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              senha: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Clima: EntityDefinition<Clima>(
        model: _entities[2],
        toOneRelations: (Clima object) => [],
        toManyRelations: (Clima object) => {},
        getId: (Clima object) => object.id,
        setId: (Clima object, int id) {
          object.id = id;
        },
        objectToFB: (Clima object, fb.Builder fbb) {
          final descricaoOffset = fbb.writeString(object.descricao);
          final condicaoOffset = fbb.writeString(object.condicao);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.data.millisecondsSinceEpoch);
          fbb.addOffset(2, descricaoOffset);
          fbb.addOffset(3, condicaoOffset);
          fbb.addInt64(4, object.temperaturaMaxima);
          fbb.addInt64(5, object.temperaturaMinima);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Clima(
              data: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)),
              temperaturaMaxima:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              temperaturaMinima:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              descricao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              condicao: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Task] entity fields to define ObjectBox queries.
class Task_ {
  /// see [Task.id]
  static final id = QueryIntegerProperty<Task>(_entities[0].properties[0]);

  /// see [Task.titulo]
  static final titulo = QueryStringProperty<Task>(_entities[0].properties[1]);

  /// see [Task.descricao]
  static final descricao =
      QueryStringProperty<Task>(_entities[0].properties[2]);

  /// see [Task.data]
  static final data = QueryIntegerProperty<Task>(_entities[0].properties[3]);

  /// see [Task.hora]
  static final hora = QueryIntegerProperty<Task>(_entities[0].properties[4]);

  /// see [Task.repetir]
  static final repetir = QueryStringProperty<Task>(_entities[0].properties[5]);

  /// see [Task.usuarioId]
  static final usuarioId =
      QueryIntegerProperty<Task>(_entities[0].properties[6]);

  /// see [Task.minutos]
  static final minutos = QueryIntegerProperty<Task>(_entities[0].properties[7]);
}

/// [Usuario] entity fields to define ObjectBox queries.
class Usuario_ {
  /// see [Usuario.id]
  static final id = QueryIntegerProperty<Usuario>(_entities[1].properties[0]);

  /// see [Usuario.nome]
  static final nome = QueryStringProperty<Usuario>(_entities[1].properties[1]);

  /// see [Usuario.email]
  static final email = QueryStringProperty<Usuario>(_entities[1].properties[2]);

  /// see [Usuario.senha]
  static final senha = QueryStringProperty<Usuario>(_entities[1].properties[3]);
}

/// [Clima] entity fields to define ObjectBox queries.
class Clima_ {
  /// see [Clima.id]
  static final id = QueryIntegerProperty<Clima>(_entities[2].properties[0]);

  /// see [Clima.data]
  static final data = QueryIntegerProperty<Clima>(_entities[2].properties[1]);

  /// see [Clima.descricao]
  static final descricao =
      QueryStringProperty<Clima>(_entities[2].properties[2]);

  /// see [Clima.condicao]
  static final condicao =
      QueryStringProperty<Clima>(_entities[2].properties[3]);

  /// see [Clima.temperaturaMaxima]
  static final temperaturaMaxima =
      QueryIntegerProperty<Clima>(_entities[2].properties[4]);

  /// see [Clima.temperaturaMinima]
  static final temperaturaMinima =
      QueryIntegerProperty<Clima>(_entities[2].properties[5]);
}
